{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/experience.js","js/controllers/main.js","models/picture.js","js/controllers/pictures.js","models/user.js","js/controllers/user.js","models/video.js","js/controllers/videos.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","facebook","clientId","github","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","authenticate","provider","res","console","log","SoundScapeController","InstrumentExperienceController","BreathingExerciseController","ElizaChatBotController","MoodCarouselController","MainController","$rootScope","logout","secureState","e","toState","main","message","isAuthenticated","protectedStates","includes","name","preventDefault","isLoggedIn","$on","Pictures","$resource","id","update","method","PicturesIndexController","picturesIndex","all","query","PicturesShowController","Picture","picturesShow","picture","get","params","PicturesNewController","createPicture","save","picturesNew","create","User","UserFormController","userForm","$update","getPayload","_id","UserDataController","userData","moodSelect","mood","moodCarousel","updateResult","Videos","VideosIndexController","videosIndex","VideosShowController","Video","videosShow","video","VideosNewController","createVideo","videosNew","angular","module","config","$inject","factory"],"mappings":"YAMA,SAASA,QAAOC,EAAgBC,GAC9BD,EACGE,MAAM,SACLC,IAAK,SACLC,YAAa,wBACbC,WAAY,6BAEbH,MAAM,YACLC,IAAK,YACLC,YAAa,2BACbC,WAAY,mCAEbH,MAAM,aACLC,IAAK,aACLC,YAAa,8BAGdF,MAAM,YACLC,IAAK,YACLC,YAAa,2BACbC,WAAY,mCAEbH,MAAM,UACLC,IAAK,UACLC,YAAa,wCAEdF,MAAM,kBACLC,IAAK,mBACLC,YAAa,8CACbC,WAAY,6CAEbH,MAAM,gBACLC,IAAK,iBACLC,YAAa,4CACbC,WAAY,yCAEbH,MAAM,YACLC,IAAK,YACLC,YAAa,2BACbC,WAAY,mCAEbH,MAAM,wBACLC,IAAK,0BACLC,YAAa,gDACbC,WAAY,uCAEbH,MAAM,wBACLC,IAAK,0BACLC,YAAa,gDACbC,WAAY,2DAEbH,MAAM,qBACLC,IAAK,yBACLC,YAAa,6CACbC,WAAY,qDAEbH,MAAM,gBACLC,IAAK,4BACLC,YAAa,wCACbC,WAAY,2CAEbH,MAAM,gBACLC,IAAK,0BACLC,YAAa,+BACbC,WAAY,2CAGhBJ,EAAmBK,UAAU,cAG/B,QAASC,MAAKC,GACZA,EAAcC,SAAW,SACzBD,EAAcE,UAAY,YAC1BF,EAAcG,YAAc,GAC5BH,EAAcI,UACZC,SAAU,qBAEZL,EAAcM,QACZD,SAAU,yBC/Ed,QAASE,oBAAmBC,EAAOC,GAGjC,QAASC,KACPF,EAAMG,OAAOC,EAASC,MACnBC,KAAK,WACJL,EAAOM,GAAG,WALhB,GAAMH,GAAWI,IACjBJ,GAASC,QAOTD,EAASF,OAASA,EAGpB,QAASO,iBAAgBT,EAAOC,GAG9B,QAASC,KACPF,EAAMU,MAAMA,EAAMC,aACjBL,KAAK,WACJL,EAAOM,GAAG,cAGd,QAASK,GAAaC,GACpBb,EAAMY,aAAaC,GAClBP,KAAK,SAACQ,GACLC,QAAQC,IAAIF,GACZb,EAAOM,GAAG,eAZd,GAAMG,GAAQF,IACdE,GAAMC,eAcND,EAAMR,OAASA,EACfQ,EAAME,aAAeA,ECzBvB,QAASK,yBAKT,QAASC,mCAKT,QAASC,gCAKT,QAASC,2BAKT,QAASC,2BCvBT,QAASC,gBAAetB,EAAOC,EAAQsB,GAIrC,QAASC,KACPxB,EAAMwB,SACLlB,KAAK,WACJL,EAAOM,GAAG,eAId,QAASkB,GAAYC,EAAGC,GACtBC,EAAKC,QAAU,KACfd,QAAQC,IAAIW,EAASD,IACjB1B,EAAM8B,mBAAqBC,EAAgBC,SAASL,EAAQM,QAC9DP,EAAEQ,iBACFN,EAAKC,QAAU,qCACf5B,EAAOM,GAAG,UAhBd,GAAMqB,GAAOpB,IACboB,GAAKO,WAAanC,EAAM8B,gBACxBF,EAAKC,QAAU,IAOf,IAAME,IAAmB,YAUzBR,GAAWa,IAAI,oBAAqBX,GACpCG,EAAKJ,OAASA,ECtBhB,QAASa,UAASC,GAChB,MAAO,IAAIA,GAAU,iBAAmBC,GAAI,SAC1CC,QAAUC,OAAQ,SCDtB,QAASC,yBAAwBL,GAC/B,GAAMM,GAAgBnC,IACtBO,SAAQC,IAAIqB,GAEZM,EAAcC,IAAMP,EAASQ,QAI/B,QAASC,wBAAuBC,EAAS9C,EAAQD,GAC/C,GAAMgD,GAAexC,IAErBwC,GAAaC,QAAUF,EAAQG,IAAIjD,EAAOkD,QAC1CH,EAAab,WAAanC,EAAM8B,gBAIlC,QAASsB,uBAAsBL,EAAS9C,GAKtC,QAASoD,KACPN,EAAQO,KAAKC,EAAYN,QAAS,WAChChD,EAAOM,GAAG,oBANd,GAAMgD,GAAc/C,IAEpB+C,GAAYN,WAQZM,EAAYC,OAASH,EC7BvB,QAASI,MAAKnB,GACZ,MAAO,IAAIA,GAAU,cAAgBC,GAAI,SACvCC,QAAUC,OAAQ,SCAtB,QAASiB,oBAAmB1D,EAAOyD,EAAMxD,GAKvC,QAASC,KAEPyD,EAAStD,KAAKuD,QAAQ,WAEpB7C,QAAQC,IAAI,wBAAyB2C,EAAStD,MAC9CJ,EAAOM,GAAG,eATd,GAAMoD,GAAWnD,IAEjBmD,GAAStD,KAAOoD,EAAKP,KAAMX,GAAIvC,EAAM6D,aAAaC,MAWlDH,EAASzD,OAASA,EAKpB,QAAS6D,oBAAoB/D,EAAOyD,GAClC,GAAMO,GAAWxD,IAEjBwD,GAAS3D,KAAOoD,EAAKP,KAAMX,GAAIvC,EAAM6D,aAAaC,MAKpD,QAASzC,wBAAuBrB,EAAOyD,EAAMxD,GAK3C,QAASgE,GAAWC,GAClBnD,QAAQC,IAAI,YAAakD,GAGzBC,EAAa9D,KAAK6D,KAAOA,EACzBnD,QAAQC,IAAImD,EAAa9D,KAGzB,IAAM+D,GAAeX,EAAKjB,QAAQD,GAAIvC,EAAM6D,aAAaC,KAAMK,EAAa9D,KAC5EU,SAAQC,IAAI,gBAAiBoD,GAS7BnE,EAAOM,GAAG,YAtBZ,GAAM4D,GAAe3D,IAErB2D,GAAa9D,KAAOoD,EAAKP,KAAMX,GAAIvC,EAAM6D,aAAaC,MA2BtDK,EAAaF,WAAaA,EC1D5B,QAASI,QAAO/B,GACd,MAAO,IAAIA,GAAU,eAAiBC,GAAI,SACxCC,QAAUC,OAAQ,SCDtB,QAAS6B,uBAAsBD,GAC7B,GAAME,GAAc/D,IACpBO,SAAQC,IAAIqD,GAEZE,EAAY3B,IAAMyB,EAAOxB,QAI3B,QAAS2B,sBAAqBC,EAAOxE,EAAQD,GAC3C,GAAM0E,GAAalE,IAEnBkE,GAAWC,MAAQF,EAAMvB,IAAIjD,EAAOkD,QACpCuB,EAAWvC,WAAanC,EAAM8B,gBAIhC,QAAS8C,qBAAoBH,EAAOxE,GAKlC,QAAS4E,KACPJ,EAAMnB,KAAKwB,EAAUH,MAAO,WAC1B1E,EAAOM,GAAG,kBANd,GAAMuE,GAAYtE,IAElBsE,GAAUH,SAQVG,EAAUtB,OAASqB,ETjCrBE,QACGC,OAAO,WAAY,aAAc,YAAa,aAAc,qBAC5DC,OAAOlG,QACPkG,OAAO1F,MAEVR,OAAOmG,SAAW,iBAAkB,sBAsEpC3F,KAAK2F,SAAW,iBC3EhBH,QAAQC,OAAO,WACZ3F,WAAW,qBAAsBU,oBACjCV,WAAW,kBAAmBoB,iBAEjCV,mBAAmBmF,SAAW,QAAS,UAYvCzE,gBAAgByE,SAAW,QAAS,UChBpCH,QAAQC,OAAO,WACZ3F,WAAW,uBAAwB4B,sBACnC5B,WAAW,iCAAkC6B,gCAC7C7B,WAAW,8BAA+B8B,6BAC1C9B,WAAW,yBAA0B+B,wBACrC/B,WAAW,yBAA0BgC,wBAGxCJ,qBAAqBiE,WAKrBhE,+BAA+BgE,WAK/B/D,4BAA4B+D,WAK5B9D,uBAAuB8D,WAKvB7D,uBAAuB6D,WC5BvBH,QAAQC,OAAO,WACZ3F,WAAW,iBAAkBiC,gBAIhCA,eAAe4D,SAAW,QAAS,SAAU,cCL7CH,QAAQC,OAAO,WACZG,QAAQ,WAAY9C,UAEvBA,SAAS6C,SAAW,aCHpBH,QAAQC,OAAO,WACZ3F,WAAW,0BAA2BqD,yBACtCrD,WAAW,yBAA0ByD,wBACrCzD,WAAW,wBAAyB+D,uBAEvCV,wBAAwBwC,SAAW,YAQnCpC,uBAAuBoC,SAAW,UAAW,SAAU,SAQvD9B,sBAAsB8B,SAAW,UAAW,UCrB5CH,QAAQC,OAAO,WACZG,QAAQ,OAAQ1B,MAEnBA,KAAKyB,SAAW,aCHhBH,QAAQC,OAAO,WACb3F,WAAW,qBAAsBqE,oBACjCrE,WAAW,qBAAsB0E,oBACjC1E,WAAW,yBAA0BgC,wBAEvCqC,mBAAmBwB,SAAW,QAAS,OAAQ,UAmB/CnB,mBAAmBmB,SAAW,QAAS,QAQvC7D,uBAAuB6D,SAAW,QAAS,OAAQ,UChCnDH,QAAQC,OAAO,WACZG,QAAQ,SAAUd,QAErBA,OAAOa,SAAW,aCHlBH,QAAQC,OAAO,WACZ3F,WAAW,wBAAyBiF,uBACpCjF,WAAW,uBAAwBmF,sBACnCnF,WAAW,sBAAuBuF,qBAErCN,sBAAsBY,SAAW,UAQjCV,qBAAqBU,SAAW,QAAS,SAAU,SAQnDN,oBAAoBM,SAAW,QAAS","file":"app.js","sourcesContent":["angular\n  .module('moodApp', ['ngResource', 'ui.router', 'satellizer', 'angular-carousel'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('moodIndex', {\n      url: '/moodIndex',\n      templateUrl: '/templates/moodIndex.html'\n      // controller: 'moodIndexController as moodIndex'\n    })\n    .state('userForm', {\n      url: '/userForm',\n      templateUrl: '/templates/userForm.html',\n      controller: 'UserFormController as userForm'\n    })\n    .state('search', {\n      url: '/search',\n      templateUrl: '/templates/searchEngine/search.html'\n    })\n    .state('searchPictures', {\n      url: '/search/pictures',\n      templateUrl: '/templates/searchEngine/searchPictures.html',\n      controller: 'PicturesIndexController as picturesIndex'\n    })\n    .state('searchVideos', {\n      url: '/search/videos',\n      templateUrl: '/templates/searchEngine/searchVideos.html',\n      controller: 'VideosIndexController as videosIndex'\n    })\n    .state('userData', {\n      url: '/userData',\n      templateUrl: '/templates/userData.html',\n      controller: 'UserDataController as userData'\n    })\n    .state('soundScapeExperience', {\n      url: '/experiences/soundscape',\n      templateUrl: '/templates/sessions/soundScapeExperience.html',\n      controller: 'SoundScapeController as soundScape'\n    })\n    .state('instrumentExperience', {\n      url: '/experiences/instrument',\n      templateUrl: '/templates/sessions/instrumentExperience.html',\n      controller: 'InstrumentExperienceController as instrumentExperience'\n    })\n    .state('breathingExercise', {\n      url: '/experiences/breathing',\n      templateUrl: '/templates/sessions/breathingExercise.html',\n      controller: 'BreathingExerciseController as breathingExercise'\n    })\n    .state('elizaChatBot', {\n      url: '/experiences/elizaChatBot',\n      templateUrl: '/templates/sessions/elizaChatBot.html',\n      controller: 'ElizaChatBotController as elizaChatBot'\n    })\n    .state('moodCarousel', {\n      url: '/templates/moodCarousel',\n      templateUrl: '/templates/moodCarousel.html',\n      controller: 'MoodCarouselController as moodCarousel'\n    });\n\n  $urlRouterProvider.otherwise('/moodIndex');\n}\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n  $authProvider.tokenPrefix = '';\n  $authProvider.facebook({\n    clientId: '1114403908656537'\n  });\n  $authProvider.github({\n    clientId: 'f226d5ade062bb0c6600'\n  });\n}\n","angular.module('moodApp')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n  register.user = {};\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n  register.submit = submit;\n}\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n  login.credentials = {};\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('userForm');\n    });\n  }\n  function authenticate(provider) {\n    $auth.authenticate(provider)\n    .then((res) => {\n      console.log(res);\n      $state.go('moodIndex');\n    });\n  }\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular.module('moodApp')\n  .controller('SoundScapeController', SoundScapeController)\n  .controller('InstrumentExperienceController', InstrumentExperienceController)\n  .controller('BreathingExerciseController', BreathingExerciseController)\n  .controller('ElizaChatBotController', ElizaChatBotController)\n  .controller('MoodCarouselController', MoodCarouselController);\n\n\nSoundScapeController.$inject = [];\nfunction SoundScapeController() {\n\n}\n\nInstrumentExperienceController.$inject = [];\nfunction InstrumentExperienceController() {\n\n}\n\nBreathingExerciseController.$inject = [];\nfunction BreathingExerciseController() {\n\n}\n\nElizaChatBotController.$inject = [];\nfunction ElizaChatBotController() {\n\n}\n\nMoodCarouselController.$inject = [];\nfunction MoodCarouselController() {\n\n}\n","angular.module('moodApp')\n  .controller('MainController', MainController);\n  // .controller('MoodIndexController', MoodIndexController );\n\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('moodIndex');\n    });\n  }\n  const protectedStates = ['moodIndex'];\n  function secureState(e, toState) {\n    main.message = null;\n    console.log(toState, e);\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      main.message = 'You must be logged in to go there!';\n      $state.go('login');\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n  main.logout = logout;\n}\n","angular.module('moodApp')\n  .factory('Pictures', Pictures);\n\nPictures.$inject = ['$resource'];\n\nfunction Pictures($resource) {\n  return new $resource('/pictures/:id', { id: '@_id' }, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('moodApp')\n  .controller('PicturesIndexController', PicturesIndexController)\n  .controller('PicturesShowController', PicturesShowController)\n  .controller('PicturesNewController', PicturesNewController);\n\nPicturesIndexController.$inject = ['Pictures'];\nfunction PicturesIndexController(Pictures) {\n  const picturesIndex = this;\n  console.log(Pictures);\n\n  picturesIndex.all = Pictures.query();\n}\n\nPicturesShowController.$inject = ['Picture', '$state', '$auth'];\nfunction PicturesShowController(Picture, $state, $auth) {\n  const picturesShow = this;\n\n  picturesShow.picture = Picture.get($state.params);\n  picturesShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nPicturesNewController.$inject = ['Picture', '$state'];\nfunction PicturesNewController(Picture, $state) {\n  const picturesNew = this;\n\n  picturesNew.picture = {};\n\n  function createPicture() {\n    Picture.save(picturesNew.picture, () => {\n      $state.go('searchPictures');\n    });\n  }\n\n  picturesNew.create = createPicture;\n}\n","angular.module('moodApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('moodApp')\n .controller('UserFormController', UserFormController)\n .controller('UserDataController', UserDataController)\n .controller('MoodCarouselController', MoodCarouselController);\n\nUserFormController.$inject = ['$auth', 'User', '$state'];\nfunction UserFormController($auth, User, $state) {\n  const userForm = this;\n\n  userForm.user = User.get({ id: $auth.getPayload()._id });\n\n  function submit() {\n   // console.log('pre update', userForm.user);\n    userForm.user.$update(() => {\n\n      console.log('post update your data', userForm.user);\n      $state.go('moodIndex');\n    });\n  }\n\n  userForm.submit = submit;\n\n}\n\nUserDataController.$inject = ['$auth', 'User' ];\nfunction UserDataController ($auth, User ) {\n  const userData = this;\n\n  userData.user = User.get({ id: $auth.getPayload()._id });\n\n}\n\nMoodCarouselController.$inject = ['$auth', 'User', '$state'];\nfunction MoodCarouselController($auth, User, $state) {\n  const moodCarousel = this;\n\n  moodCarousel.user = User.get({ id: $auth.getPayload()._id });\n\n  function moodSelect(mood) {\n    console.log('clicked: ', mood);\n\n\n    moodCarousel.user.mood = mood;\n    console.log(moodCarousel.user);\n\n\n    const updateResult = User.update({id: $auth.getPayload()._id}, moodCarousel.user);\n    console.log('updateResult:', updateResult);\n\n\n   // moodCarousel.user.$update(() => {\n   //   // TODO: find out what this first parameter is used for -\n   //   // check documentation for $update()\n   //   console.log('moodCarousel.user.$update: find out why we got here!!');\n   // }, () => {\n   //   console.log('your data', moodCarousel.user);\n    $state.go('userData');\n   // }, () => {\n   //   console.log('moodCarousel.user.$update: error(?): arguments:', arguments);\n   // });\n\n\n  }\n  moodCarousel.moodSelect = moodSelect;\n}\n","angular.module('moodApp')\n  .factory('Videos', Videos);\n\nVideos.$inject = ['$resource'];\n\nfunction Videos($resource) {\n  return new $resource('/videos/:id', { id: '@_id' }, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('moodApp')\n  .controller('VideosIndexController', VideosIndexController)\n  .controller('VideosShowController', VideosShowController)\n  .controller('VideosNewController', VideosNewController);\n\nVideosIndexController.$inject = ['Videos'];\nfunction VideosIndexController(Videos) {\n  const videosIndex = this;\n  console.log(Videos);\n\n  videosIndex.all = Videos.query();\n}\n\nVideosShowController.$inject = ['Video', '$state', '$auth'];\nfunction VideosShowController(Video, $state, $auth) {\n  const videosShow = this;\n\n  videosShow.video = Video.get($state.params);\n  videosShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nVideosNewController.$inject = ['Video', '$state'];\nfunction VideosNewController(Video, $state) {\n  const videosNew = this;\n\n  videosNew.video = {};\n\n  function createVideo() {\n    Video.save(videosNew.video, () => {\n      $state.go('searchVideos');\n    });\n  }\n\n  videosNew.create = createVideo;\n}\n"]}