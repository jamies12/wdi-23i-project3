{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/experience.js","models/journal.js","js/controllers/journals.js","js/controllers/main.js","models/picture.js","js/controllers/pictures.js","js/controllers/user.js","models/user.js","models/video.js","js/controllers/videos.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","facebook","clientId","github","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","authenticate","provider","res","console","log","SoundScapeController","InstrumentExperienceController","BreathingExerciseController","ElizaChatBotController","MoodCarouselController","Journal","$resource","id","update","method","JournalsIndexController","User","journalsIndex","get","getPayload","_id","JournalsShowController","remove","journalsShow","journal","params","isLoggedIn","isAuthenticated","delete","JournalsNewController","createJournal","journalsNew","newJournal","journalEntry","timeStamp","Date","now","journals","push","create","JournalsEditController","updateJournal","journalsEdit","MainController","$rootScope","logout","secureState","e","toState","main","message","protectedStates","includes","name","preventDefault","$on","Pictures","PicturesIndexController","picturesIndex","all","query","PicturesShowController","Picture","picturesShow","picture","PicturesNewController","createPicture","save","picturesNew","UserFormController","userForm","$update","UserDataController","userData","moodSelect","mood","moodValue","moodCarousel","newMood","value","updateResult","ImageSelectController","imageSelection","which","imageSelect","setTitle1","imageChoice","setTitle2","counter","images1","length","setImage1","setImage2","images2","title","src","padding","Videos","VideosIndexController","videosIndex","VideosShowController","Video","videosShow","video","VideosNewController","createVideo","videosNew","angular","module","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular\n  .module('moodApp', ['ngResource', 'ui.router', 'satellizer', 'angular-carousel'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('moodIndex', {\n      url: '/moodIndex',\n      templateUrl: '/templates/moodIndex.html'\n      // controller: 'moodIndexController as moodIndex'\n    })\n    .state('userForm', {\n      url: '/userForm',\n      templateUrl: '/templates/userForm.html',\n      controller: 'UserFormController as userForm'\n    })\n    .state('search', {\n      url: '/search',\n      templateUrl: '/templates/searchEngine/search.html'\n    })\n    .state('searchPictures', {\n      url: '/search/pictures',\n      templateUrl: '/templates/searchEngine/searchPictures.html',\n      controller: 'PicturesIndexController as picturesIndex'\n    })\n    .state('searchVideos', {\n      url: '/search/videos',\n      templateUrl: '/templates/searchEngine/searchVideos.html',\n      controller: 'VideosIndexController as videosIndex'\n    })\n    .state('journals', {\n      url: '/journals',\n      templateUrl: '/templates/journals/journalsEntries.html',\n      controller: 'JournalsIndexController as journalsIndex'\n    })\n    .state('journalsCreate', {\n      url: '/journals/create',\n      templateUrl: '/templates/journals/journalCreate.html',\n      controller: 'JournalsNewController as journalsNew'\n    })\n    .state('userData', {\n      url: '/userData',\n      templateUrl: '/templates/userData.html',\n      controller: 'UserDataController as userData'\n    })\n    .state('soundScapeExperience', {\n      url: '/experiences/soundscape',\n      templateUrl: '/templates/sessions/soundScapeExperience.html',\n      controller: 'SoundScapeController as soundScape'\n    })\n    .state('instrumentExperience', {\n      url: '/experiences/instrument',\n      templateUrl: '/templates/sessions/instrumentExperience.html',\n      controller: 'InstrumentExperienceController as instrumentExperience'\n    })\n    .state('breathingExercise', {\n      url: '/experiences/breathing',\n      templateUrl: '/templates/sessions/breathingExercise.html',\n      controller: 'BreathingExerciseController as breathingExercise'\n    })\n    .state('elizaChatBot', {\n      url: '/experiences/elizaChatBot',\n      templateUrl: '/templates/sessions/elizaChatBot.html',\n      controller: 'ElizaChatBotController as elizaChatBot'\n    })\n    .state('moodCarousel', {\n      url: '/templates/moodCarousel',\n      templateUrl: '/templates/moodCarousel.html',\n      controller: 'MoodCarouselController as moodCarousel'\n    })\n    .state('imageSelect', {\n      url: '/templates/imageSelect',\n      templateUrl: '/templates/imageSelect.html',\n      controller: 'ImageSelectController as imageSelect'\n    });\n\n  $urlRouterProvider.otherwise('/moodIndex');\n}\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n  $authProvider.tokenPrefix = '';\n  $authProvider.facebook({\n    clientId: '1114403908656537'\n  });\n  $authProvider.github({\n    clientId: 'f226d5ade062bb0c6600'\n  });\n}\n","angular.module('moodApp')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n  register.user = {};\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n  register.submit = submit;\n}\n\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n  login.credentials = {};\n  function submit() {\n    $auth.login(login.credentials)\n    .then(() => {\n      $state.go('userForm');\n    });\n  }\n  function authenticate(provider) {\n    $auth.authenticate(provider)\n    .then((res) => {\n      console.log(res);\n      $state.go('moodIndex');\n    });\n  }\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular.module('moodApp')\n  .controller('SoundScapeController', SoundScapeController)\n  .controller('InstrumentExperienceController', InstrumentExperienceController)\n  .controller('BreathingExerciseController', BreathingExerciseController)\n  .controller('ElizaChatBotController', ElizaChatBotController)\n  .controller('MoodCarouselController', MoodCarouselController);\n\n\nSoundScapeController.$inject = [];\nfunction SoundScapeController() {\n\n}\n\nInstrumentExperienceController.$inject = [];\nfunction InstrumentExperienceController() {\n\n}\n\nBreathingExerciseController.$inject = [];\nfunction BreathingExerciseController() {\n\n}\n\nElizaChatBotController.$inject = [];\nfunction ElizaChatBotController() {\n\n}\n\nMoodCarouselController.$inject = [];\nfunction MoodCarouselController() {\n\n}\n","angular.module('moodApp')\n  .factory('Journal', Journal);\n\nJournal.$inject = ['$resource'];\nfunction Journal($resource) {\n  return new $resource('/journals/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('moodApp')\n  .controller('JournalsIndexController', JournalsIndexController)\n  .controller('JournalsShowController', JournalsShowController)\n  .controller('JournalsNewController', JournalsNewController)\n  .controller('JournalsEditController', JournalsEditController);\n\nJournalsIndexController.$inject = ['Journal', 'User', '$auth'];\nfunction JournalsIndexController(Journal, User, $auth) {\n  const journalsIndex = this;\n\n  journalsIndex.user = User.get({ id: $auth.getPayload()._id });\n  console.log(journalsIndex.user);\n  // journalsIndex.all = Journal.get([]);\n  // console.log(journalsIndex.user.journals());\n  // console.log(journalsIndex.all);\n  // journalsIndex.user.all = Journal.query();\n}\n\nJournalsShowController.$inject = ['Journal', '$state', '$auth'];\nfunction JournalsShowController(Journal, $state, $auth) {\n  const journalsShow = this;\n\n  journalsShow.journal = Journal.get($state.params);\n  journalsShow.isLoggedIn = $auth.isAuthenticated;\n\n  function remove() {\n    Journal.remove({ id: journalsShow.journal._id }, () => {\n      $state.go('journals');\n    });\n  }\n\n  journalsShow.delete = remove;\n}\n\nJournalsNewController.$inject = ['Journal', '$state', 'User', '$auth'];\nfunction JournalsNewController(Journal, $state, User, $auth) {\n  const journalsNew = this;\n\n  journalsNew.user = User.get({ id: $auth.getPayload()._id });\n  journalsNew.newJournal = {};\n\n\n\n\n  function createJournal() {\n    journalsNew.newJournal.journalEntry.timeStamp = Date.now();\n    console.log('your entry', journalsNew.newJournal);\n    journalsNew.user.journals.push(journalsNew.newJournal);\n    User.update(journalsNew.user, () => {\n      $state.go('journals');\n    });\n  }\n\n  journalsNew.create = createJournal;\n}\n\nJournalsEditController.$inject = ['Journal', '$state'];\nfunction JournalsEditController(Journal, $state) {\n  const journalsEdit = this;\n  journalsEdit.journal = Journal.get($state.params);\n\n  function updateJournal() {\n    Journal.update(journalsEdit.journal, () => {\n      $state.go('journals', $state.params);\n    });\n  }\n\n  journalsEdit.update = updateJournal;\n}\n","angular.module('moodApp')\n  .controller('MainController', MainController);\n  // .controller('MoodIndexController', MoodIndexController );\n\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('moodIndex');\n    });\n  }\n  const protectedStates = ['moodIndex'];\n  function secureState(e, toState) {\n    main.message = null;\n    console.log(toState, e);\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      main.message = 'You must be logged in to go there!';\n      $state.go('login');\n    }\n  }\n  $rootScope.$on('$stateChangeStart', secureState);\n  main.logout = logout;\n}\n","angular.module('moodApp')\n  .factory('Pictures', Pictures);\n\nPictures.$inject = ['$resource'];\n\nfunction Pictures($resource) {\n  return new $resource('/pictures/:id', { id: '@_id' }, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('moodApp')\n  .controller('PicturesIndexController', PicturesIndexController)\n  .controller('PicturesShowController', PicturesShowController)\n  .controller('PicturesNewController', PicturesNewController);\n\nPicturesIndexController.$inject = ['Pictures'];\nfunction PicturesIndexController(Pictures) {\n  const picturesIndex = this;\n  console.log(Pictures);\n\n  picturesIndex.all = Pictures.query();\n}\n\nPicturesShowController.$inject = ['Picture', '$state', '$auth'];\nfunction PicturesShowController(Picture, $state, $auth) {\n  const picturesShow = this;\n\n  picturesShow.picture = Picture.get($state.params);\n  picturesShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nPicturesNewController.$inject = ['Picture', '$state'];\nfunction PicturesNewController(Picture, $state) {\n  const picturesNew = this;\n\n  picturesNew.picture = {};\n\n  function createPicture() {\n    Picture.save(picturesNew.picture, () => {\n      $state.go('searchPictures');\n    });\n  }\n\n  picturesNew.create = createPicture;\n}\n","angular.module('moodApp')\n .controller('UserFormController', UserFormController)\n .controller('UserDataController', UserDataController)\n .controller('MoodCarouselController', MoodCarouselController)\n .controller('ImageSelectController', ImageSelectController);\n\nUserFormController.$inject = ['$auth', 'User', '$state'];\nfunction UserFormController($auth, User, $state) {\n  const userForm = this;\n\n  userForm.user = User.get({ id: $auth.getPayload()._id });\n\n  function submit() {\n   // console.log('pre update', userForm.user);\n    userForm.user.$update(() => {\n\n      console.log('post update your data', userForm.user);\n      $state.go('moodIndex');\n    });\n  }\n\n  userForm.submit = submit;\n\n}\n\nUserDataController.$inject = ['$auth', 'User' ];\nfunction UserDataController ($auth, User ) {\n  const userData = this;\n\n  userData.user = User.get({ id: $auth.getPayload()._id });\n\n}\n\nMoodCarouselController.$inject = ['$auth', 'User', '$state'];\nfunction MoodCarouselController($auth, User, $state) {\n  const moodCarousel = this;\n\n  moodCarousel.user = User.get({ id: $auth.getPayload()._id });\n\n  function moodSelect(mood, moodValue) {\n    console.log('clicked: ', mood, moodValue);\n    // console.log(moodCarousel.user.mood);\n\n    moodCarousel.user.newMood = {};\n    moodCarousel.user.newMood.mood = mood;\n    moodCarousel.user.newMood.value = moodValue;\n    moodCarousel.user.newMood.timeStamp = Date.now();\n    console.log(moodCarousel.user);\n\n    moodCarousel.user.mood.push(moodCarousel.user.newMood);\n\n    const updateResult = User.update({id: $auth.getPayload()._id}, moodCarousel.user);\n    console.log('updateResult:', updateResult);\n\n\n   // moodCarousel.user.$update(() => {\n   //   // TODO: find out what this first parameter is used for -\n   //   // check documentation for $update()\n   //   console.log('moodCarousel.user.$update: find out why we got here!!');\n   // }, () => {\n   //   console.log('your data', moodCarousel.user);\n    $state.go('userData');\n   // }, () => {\n   //   console.log('moodCarousel.user.$update: error(?): arguments:', arguments);\n   // });\n\n\n  }\n  moodCarousel.moodSelect = moodSelect;\n}\n\nImageSelectController.$inject = ['$auth', 'User', '$state'];\nfunction ImageSelectController($auth, User, $state) {\n  const imageSelect = this;\n\n  imageSelect.user = User.get({ id: $auth.getPayload()._id });\n\n  imageSelect.images1 = [\n    {title: 'meadow', src: '../images/meadow.jpg'},\n    {title: 'beach', src: '../images/beach.jpg'},\n    {title: 'chocolate', src: '../images/chocolate.jpg'},\n    {title: 'cats', src: '../images/cats.jpg'},\n    {title: 'clouds', src: '../images/clouds.jpg'},\n    {title: 'countryside', src: '../images/countryside.jpg'},\n    {padding: 'padding'}\n  ];\n  imageSelect.images2 = [\n    {title: 'mountains', src: '../images/mountains.jpg'},\n    {title: 'forest', src: '../images/forest.jpg'},\n    {title: 'fruit', src: '../images/fruit.jpg'},\n    {title: 'dogs', src: '../images/dogs.jpg'},\n    {title: 'waterfall', src: '../images/waterfall.jpg'},\n    {title: 'city', src: '../images/city.jpg'},\n    {padding: 'padding'}\n  ];\n\n  let counter = 0;\n  imageSelect.setImage1 = imageSelect.images1[counter];\n  imageSelect.setImage2 = imageSelect.images2[counter];\n\n  imageSelect.setTitle1 = imageSelect.images1[counter].title;\n  imageSelect.setTitle2 = imageSelect.images2[counter].title;\n\n  function imageSelection(which) {\n    if(which === 1) {\n      console.log(imageSelect.setTitle1);\n      imageSelect.user.imageChoice.push(imageSelect.setTitle1);\n    } else {\n      console.log(imageSelect.setTitle2);\n      imageSelect.user.imageChoice.push(imageSelect.setTitle2);\n    }\n\n    counter++;\n    console.log(counter);\n    console.log(imageSelect.images1.length);\n    imageSelect.setImage1 = imageSelect.images1[counter];\n    imageSelect.setImage2 = imageSelect.images2[counter];\n\n    imageSelect.setTitle1 = imageSelect.images1[counter].title;\n    imageSelect.setTitle2 = imageSelect.images2[counter].title;\n\n\n\n    const updateResult = User.update({id: $auth.getPayload()._id}, imageSelect.user);\n    console.log('updateResult:', updateResult);\n\n    if (counter === imageSelect.images1.length -1) {\n      console.log('done');\n      $state.go('moodCarousel');\n    }\n  }\n\n  imageSelect.imageChoice = imageSelection;\n\n}\n","angular.module('moodApp')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\nfunction User($resource) {\n  return new $resource('/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('moodApp')\n  .factory('Videos', Videos);\n\nVideos.$inject = ['$resource'];\n\nfunction Videos($resource) {\n  return new $resource('/videos/:id', { id: '@_id' }, {\n    update: { method: 'PUT'}\n  });\n}\n","angular.module('moodApp')\n  .controller('VideosIndexController', VideosIndexController)\n  .controller('VideosShowController', VideosShowController)\n  .controller('VideosNewController', VideosNewController);\n\nVideosIndexController.$inject = ['Videos'];\nfunction VideosIndexController(Videos) {\n  const videosIndex = this;\n  console.log(Videos);\n\n  videosIndex.all = Videos.query();\n}\n\nVideosShowController.$inject = ['Video', '$state', '$auth'];\nfunction VideosShowController(Video, $state, $auth) {\n  const videosShow = this;\n\n  videosShow.video = Video.get($state.params);\n  videosShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nVideosNewController.$inject = ['Video', '$state'];\nfunction VideosNewController(Video, $state) {\n  const videosNew = this;\n\n  videosNew.video = {};\n\n  function createVideo() {\n    Video.save(videosNew.video, () => {\n      $state.go('searchVideos');\n    });\n  }\n\n  videosNew.create = createVideo;\n}\n"]}